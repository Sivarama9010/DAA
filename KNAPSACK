#include <stdio.h>

// Function to find the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the Knapsack problem using dynamic programming
int knapsack(int weight_limit, int weights[], int profits[], int n) {
    int dp[n + 1][weight_limit + 1];

    // Initialize the dp table
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= weight_limit; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (weights[i - 1] <= w)
                dp[i][w] = max(profits[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    return dp[n][weight_limit];
}

int main() {
    int weight_limit = 100;
    int weights[] = {40, 30, 20, 30};
    int profits[] = {80, 70, 50, 80};
    int n = sizeof(weights) / sizeof(weights[0]);

    int max_profit = knapsack(weight_limit, weights, profits, n);

    printf("Maximum profit: %d\n", max_profit);

    return 0;
}
